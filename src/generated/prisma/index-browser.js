
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AccesoScalarFieldEnum = {
  pk_acceso: 'pk_acceso',
  usuario: 'usuario',
  contrasena: 'contrasena',
  fk_modulo: 'fk_modulo'
};

exports.Prisma.AsignaturasScalarFieldEnum = {
  pk_asignatura: 'pk_asignatura',
  nombre_asignatura: 'nombre_asignatura',
  codigo: 'codigo'
};

exports.Prisma.AulasScalarFieldEnum = {
  pk_aula: 'pk_aula',
  nombre_aula: 'nombre_aula',
  capacidad: 'capacidad'
};

exports.Prisma.CargoScalarFieldEnum = {
  pk_cargo: 'pk_cargo',
  nombre_cargo: 'nombre_cargo'
};

exports.Prisma.CiaScalarFieldEnum = {
  pk_cia: 'pk_cia',
  nombre_cia: 'nombre_cia',
  direccion: 'direccion',
  telefono: 'telefono'
};

exports.Prisma.CivilScalarFieldEnum = {
  pk_id_civil: 'pk_id_civil',
  nombre_civil: 'nombre_civil',
  fk_id_estado: 'fk_id_estado'
};

exports.Prisma.DatosScalarFieldEnum = {
  pk_dato: 'pk_dato',
  nombre: 'nombre',
  apellido: 'apellido',
  fk_id_doc: 'fk_id_doc',
  fk_id_civil: 'fk_id_civil',
  fk_id_gene: 'fk_id_gene'
};

exports.Prisma.DocumentoScalarFieldEnum = {
  pk_id_doc: 'pk_id_doc',
  nombre_documento: 'nombre_documento',
  fk_id_estado: 'fk_id_estado'
};

exports.Prisma.EstadoScalarFieldEnum = {
  pk_id_estado: 'pk_id_estado',
  nombre: 'nombre'
};

exports.Prisma.GeneroScalarFieldEnum = {
  pk_id_gene: 'pk_id_gene',
  nom_genero: 'nom_genero',
  fk_id_estado: 'fk_id_estado'
};

exports.Prisma.HorariosScalarFieldEnum = {
  pk_horario: 'pk_horario',
  dia: 'dia',
  hora_inicio: 'hora_inicio',
  hora_fin: 'hora_fin'
};

exports.Prisma.LaboratorioScalarFieldEnum = {
  pk_lab: 'pk_lab',
  nombre_lab: 'nombre_lab',
  capacidad: 'capacidad'
};

exports.Prisma.ModulosScalarFieldEnum = {
  pk_modulos: 'pk_modulos',
  nombre: 'nombre'
};

exports.Prisma.Mov_asig_auScalarFieldEnum = {
  pk_mov: 'pk_mov',
  fk_asignatura: 'fk_asignatura',
  fk_aula: 'fk_aula',
  fk_horario: 'fk_horario'
};

exports.Prisma.PregradoScalarFieldEnum = {
  pk_pregrado: 'pk_pregrado',
  nombre_pregrado: 'nombre_pregrado'
};

exports.Prisma.Preofe_mateScalarFieldEnum = {
  pk_preofe: 'pk_preofe',
  fk_pregrado: 'fk_pregrado',
  fk_asignatura: 'fk_asignatura'
};

exports.Prisma.SemestreScalarFieldEnum = {
  pk_semestre: 'pk_semestre',
  numero: 'numero',
  fk_pregrado: 'fk_pregrado'
};

exports.Prisma.Tipo_statusScalarFieldEnum = {
  pk_status: 'pk_status',
  nombre_status: 'nombre_status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.accesoOrderByRelevanceFieldEnum = {
  usuario: 'usuario',
  contrasena: 'contrasena'
};

exports.Prisma.asignaturasOrderByRelevanceFieldEnum = {
  nombre_asignatura: 'nombre_asignatura',
  codigo: 'codigo'
};

exports.Prisma.aulasOrderByRelevanceFieldEnum = {
  nombre_aula: 'nombre_aula'
};

exports.Prisma.cargoOrderByRelevanceFieldEnum = {
  nombre_cargo: 'nombre_cargo'
};

exports.Prisma.ciaOrderByRelevanceFieldEnum = {
  nombre_cia: 'nombre_cia',
  direccion: 'direccion',
  telefono: 'telefono'
};

exports.Prisma.civilOrderByRelevanceFieldEnum = {
  nombre_civil: 'nombre_civil'
};

exports.Prisma.datosOrderByRelevanceFieldEnum = {
  nombre: 'nombre',
  apellido: 'apellido'
};

exports.Prisma.documentoOrderByRelevanceFieldEnum = {
  nombre_documento: 'nombre_documento'
};

exports.Prisma.estadoOrderByRelevanceFieldEnum = {
  nombre: 'nombre'
};

exports.Prisma.generoOrderByRelevanceFieldEnum = {
  nom_genero: 'nom_genero'
};

exports.Prisma.horariosOrderByRelevanceFieldEnum = {
  dia: 'dia'
};

exports.Prisma.laboratorioOrderByRelevanceFieldEnum = {
  nombre_lab: 'nombre_lab'
};

exports.Prisma.modulosOrderByRelevanceFieldEnum = {
  nombre: 'nombre'
};

exports.Prisma.pregradoOrderByRelevanceFieldEnum = {
  nombre_pregrado: 'nombre_pregrado'
};

exports.Prisma.tipo_statusOrderByRelevanceFieldEnum = {
  nombre_status: 'nombre_status'
};


exports.Prisma.ModelName = {
  acceso: 'acceso',
  asignaturas: 'asignaturas',
  aulas: 'aulas',
  cargo: 'cargo',
  cia: 'cia',
  civil: 'civil',
  datos: 'datos',
  documento: 'documento',
  estado: 'estado',
  genero: 'genero',
  horarios: 'horarios',
  laboratorio: 'laboratorio',
  modulos: 'modulos',
  mov_asig_au: 'mov_asig_au',
  pregrado: 'pregrado',
  preofe_mate: 'preofe_mate',
  semestre: 'semestre',
  tipo_status: 'tipo_status'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
